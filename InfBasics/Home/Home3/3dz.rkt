(load "unit-test.rkt")

#|
(if (not (null? (cdddr expr)))
         `(+ (* ,(derivative (cadr expr)) ,(caddr expr) ,(cadddr expr))
             (* ,(cadr expr) ,(derivative (caddr expr)) ,(cadddr expr))
             (* ,(cadr expr) ,(caddr expr) ,(derivative (cadddr expr))))
         `(+ (* ,(derivative (cadr expr)) ,(caddr expr))
             (* ,(cadr expr) ,(derivative (caddr expr))))))|#

(define (derivative expr)
  (cond ((number? expr) 0)
        ((or (equal? 'x expr) (equal? 'e expr)) 1)
        ((equal? (car expr) '*)
         (if (not (null? (cdddr expr)))
             `(+ (* ,(cadr expr) ,(derivative `(* ,@(cddr expr))))
                 (* ,(derivative (cadr expr)) ,@(cddr expr)))
             `(+ (* ,(cadr expr) ,(derivative (caddr expr)))
                 (* ,(derivative (cadr expr)) ,(caddr expr)))))
        ((equal? (car expr) '/)
         `(/ (- (* ,(derivative (cadr expr)) ,(caddr expr))
                (* ,(cadr expr) ,(derivative (caddr expr))))
             (expt ,(caddr expr) 2)))
        ((equal? (car expr) '+)
         (if (not (null? (cddr expr)))
             `(+ ,(derivative (cadr expr)) ,(derivative (caddr expr)))
             `(+ ,(derivative (cadr expr)))))
        ((equal? (car expr) '-)
         (if (not (null? (cddr expr)))
             `(- ,(derivative (cadr expr)) ,(derivative (caddr expr)))
             `(- ,(derivative (cadr expr)))))
        ((equal? (car expr) 'sin)
         `(* ,(derivative (cadr expr)) (cos ,(cadr expr))))
        ((equal? (car expr) 'cos)
         `(* ,(derivative (cadr expr)) (- (sin ,(cadr expr)))))
        ((equal? (car expr) 'log)
         `(/ ,(derivative (cadr expr)) ,(cadr expr)))
        ((equal? (car expr) 'exp)
         `(* ,(derivative (cadr expr)) (exp ,(cadr expr))))
        ((equal? (car expr) 'expt)
         (cond ((and (equal? (cadr expr) 'x) (number? (caddr expr)))
                `(* ,(caddr expr) (expt x ,(- (caddr expr) 1))))
               ((equal? (cadr expr) 'x)
                `(+ (expt x ,(caddr expr))
                    (* (expt x ,(caddr expr)) (log x))))
               ((and (number? (cadr expr)) (not (number? (caddr expr))))
                `(* ,(derivative (caddr expr))
                    (* (expt ,(cadr expr) ,(caddr expr))
                       (log ,(cadr expr)))))
               (else 0)))))

(define (zero-in? xs)
  (define (loop xs found?)
    (if (null? xs)
        found?
        (cond ((and (list? (car xs)) (not (equal? (caar xs) '*)))
               (loop (cdr xs) found?))
              ((list? (car xs))
               (loop (cdr xs) (or (zero-in? (cdar xs)) found?)))
              ((not (number? (car xs)))
               (loop (cdr xs) found?))
              (else
               (loop (cdr xs) (or (zero? (car xs)) found?))))))
  (loop xs #f))

(define (simplify expr)
  (cond ((or (number? expr) (symbol? expr)) expr)
        ((or (null? expr)) '())
        ((equal? (car expr) '*)
         (cond ((zero-in? (cdr expr)) 0)
               ((null? (cddr expr)) (simplify (cadr expr)))
               ((and (null? (cdddr expr)) (equal? (simplify (cadr expr)) 1))
                (simplify (caddr expr)))
               ((and (null? (cdddr expr)) (equal? (simplify (caddr expr)) 1))
                (simplify (cadr expr)))
               ((equal? (cadr expr) 1)
                (simplify `(* ,@(cddr expr))))
               (else
                `(* ,(simplify (cadr expr)) ,(simplify `(* ,@(cddr expr)))))))
        ((equal? (car expr) '+)
         (cond ((null? (cdr expr)) '())
               ((null? (cddr expr)) (simplify (cadr expr)))
               ((and (null? (cdddr expr)) (equal? (simplify (cadr expr)) 0))
                (simplify (caddr expr)))
               ((and (null? (cdddr expr)) (equal? (simplify (caddr expr)) 0))
                (simplify (cadr expr)))
               ((or (equal? (cadr expr) 0) (equal? (simplify (cadr expr)) 0))
                (simplify `(+ ,@(cddr expr))))
               ((null? (cdddr expr))
                `(+ ,(simplify (cadr expr)) ,(simplify (caddr expr))))
               (else
                `(+ ,(simplify (cadr expr)) ,(simplify `(+ ,@(cddr expr)))))))
        ((and (list? expr)
              (or (equal? (car expr) 'cos)
                  (equal? (car expr) 'sin)
                  (equal? (car expr) 'log)
                  (equal? (car expr) 'exp)))
         `(,(car expr) ,(simplify (cadr expr))))
        ((and (list? expr)
              (or (equal? (car expr) 'expt)
                  (equal? (car expr) '/)))
         `(,(car expr) ,(simplify (cadr expr)) ,(simplify (caddr expr))))
        ((and (list? expr) (equal? (car expr) '-))
         `(- ,(simplify (cadr expr)) ,(simplify `(+ ,@(cddr expr)))))
        (else expr)))
        

                
(simplify '(+ 1 2 3 (+ (+ 1 2) 2) 1 0 1 (+ 1 0 2 3 0)))
(simplify '(+ 1 2 3 (* 2 3) (* 0 2)))
(simplify '(+ 0 1))
(simplify '(+ 1 0))
(simplify '(+ 1 1))
(simplify '(+ 1 2 3))
(simplify '(+ 1))
(simplify '(+ 0 0))
(simplify '(+ 0 1 1))

(simplify '(* 0 1))
(simplify '(* 1 0))
(simplify '(* 1 1 1 1 0))
(simplify '(* 1 2 3 (* 0 1 (+ 1 2 0) 0)))
(simplify '(* 1 2 3 (+ 0 1 2)))

                                         
(define ie (interaction-environment))

(simplify '(cos (* 2 x (+ 1 0))))
(simplify '(* 2 x (+ 1 0)))

(simplify (quote (+ (* (+ 0 (* 1 x)) (cos (* 2 x (+ 1 0)))) (* (+ 1 (* 0 x)) (cos (* 2 x (+ 1 x)))))))
(simplify '(+ 1 (* 0 x)))
(simplify (quote (+ (* (- 1 (* 2 x)) (cos (* 2 x (- 1 x)))) (* (+ 1 (* 2 x)) (cos (* 2 x (+ 1 x)))))))

(simplify '(* (+ 1 (* 0 x)) (cos (* 2 x (+ 1 x)))))
(simplify (quote (+ (* (+ 0 (* 1 x)) (cos (* 2 x (+ 1 0)))) (* (+ 1 (* 0 x)) (cos (* 2 x (+ 1 x)))))))

#|
; Тесты

(define the-tests
  (list (test (derivative '(expt x 10)) '(* 10 (expt x 9)))
        (test (derivative '(* 2 (expt x 5)))
              '(+ (* 0 (expt x 5)) (* 2 (* 5 (expt x 4)))))
        (test (derivative (list '* 'x 'x)) '(+ (* 1 x) (* x 1)))))

(run-tests the-tests)
|#
