(load "unit-test.rkt")

(define (derivative expr)
  (cond ((number? expr) 0)
        ((or (equal? 'x expr) (equal? 'e expr)) 1)
        ((equal? (car expr) '*)
         `(+ (* ,(derivative (cadr expr)) ,(caddr expr))
             (* ,(cadr expr) ,(derivative (caddr expr)))))
        ((equal? (car expr) '/)
         `(/ (- (* ,(derivative (cadr expr)) ,(caddr expr))
                (* ,(cadr expr) ,(derivative (caddr expr))))
             (expt expr2 2)))
        ((equal? (car expr) '+)
         (if (not (null? (cddr expr)))
             `(+ ,(derivative (cadr expr)) ,(derivative (caddr expr)))
             `(+ ,(derivative (cadr expr)))))
        ((equal? (car expr) '-)
         (if (not (null? (cddr expr)))
             `(- ,(derivative (cadr expr)) ,(derivative (caddr expr)))
             `(- ,(derivative (cadr expr)))))
        ((equal? (car expr) 'sin)
         `(* ,(derivative (cadr expr)) (cos ,(cadr expr))))
        ((equal? (car expr) 'cos)
         `(* ,(derivative (cadr expr)) (- (sin ,(cadr expr)))))
        ((equal? (car expr) 'ln)
         `(/ ,(derivative (cadr expr)) ,(cadr expr)))
        ((equal? (car expr) 'expt)
         (cond ((equal? (cadr expr) 'e)
                `(* ,(derivative (caddr expr)) (expt e ,(caddr expr))))
               ((and (equal? (cadr expr) 'x) (number? (caddr expr)))
                `(* ,(caddr expr) (expt x ,(- (caddr expr) 1))))
               ((equal? (cadr expr) 'x)
                `(+ (expt x ,(caddr expr))
                    (* (expt x ,(caddr expr)) (ln x))))
               ((and (number? (cadr expr)) (not (number? (caddr expr))))
                `(* ,(derivative (caddr expr))
                    (* (expt ,(cadr expr) ,(caddr expr))
                       (ln ,(cadr expr)))))
               (else 0)))))

(define (list-wrap expr)
  (cond ((or (number? expr) (symbol? expr)) (list expr))
        ((and (list? expr) (not (null? expr))) (list expr))
        (else expr)))

(define (simplify expr)
  (define (loop expr)
    (cond ((null? expr) '())
          ((not (list? expr)) expr)
          ((null? (cddr expr)) (append (list (car expr))
                                       (list-wrap (loop (cadr expr)))))
          ((and (equal? (car expr) '-) (equal? (cadr expr) 0))
           (loop (caddr expr)))
          ((and (equal? (car expr) '-) (equal? (caddr expr) 0))
           (loop (cadr expr)))
          ((and (equal? (car expr) '+) (equal? (cadr expr) 0))
           (loop (caddr expr)))
          ((and (equal? (car expr) '+) (equal? (caddr expr) 0))
           (loop (cadr expr)))
          ((and (equal? (car expr) '*)
                (or (equal? (cadr expr) 0)
                    (equal? (caddr expr) 0)))
           '())
          ((and (equal? (car expr) '*) (equal? (cadr expr) 1))
           (loop (caddr expr)))
          ((and (equal? (car expr) '*) (equal? (caddr expr) 1))
           (loop (cadr expr)))
          (else (append (list (car expr))
                        (list-wrap (loop (cadr expr)))
                        (list-wrap (loop (caddr expr)))))))
  (loop expr))

#|
; Тесты

(define the-tests
  (list (test (derivative '(expt x 10)) '(* 10 (expt x 9)))
        (test (derivative '(* 2 (expt x 5)))
              '(+ (* 0 (expt x 5)) (* 2 (* 5 (expt x 4)))))
        (test (derivative (list '* 'x 'x)) '(+ (* 1 x) (* x 1)))))

(run-tests the-tests)

(derivative 2)
(derivative 'x)
(derivative '(- x))
(derivative '(* 1 x))
(derivative '(* -1 x))
(derivative '(* -4 x))
(derivative '(* 10 x))
(derivative '(- (* 2 x) 3))
(derivative '(expt x 10))
(derivative '(* 2 (expt x 5)))
(derivative '(expt x -2))
(derivative '(expt 5 x))
(derivative '(cos x))
(derivative '(sin x))
(derivative '(expt e x))
(derivative '(* 2 (expt e x)))
(derivative '(* 2 (expt e (* 2 x))))

(newline)
(display 'SIMPLIFY)
(newline)
(simplify (derivative 2))
(simplify (derivative 'x))
(simplify (derivative '(- x)))
(simplify (derivative '(* 1 x)))
(simplify (derivative '(* -1 x)))
(simplify (derivative '(* -4 x)))
(simplify (derivative '(* 10 x)))
(simplify (derivative '(- (* 2 x) 3)))
(simplify (derivative '(expt x 10)))
(simplify (derivative '(* 2 (expt x 5))))
(simplify (derivative '(expt x -2)))
(simplify (derivative '(expt 5 x)))
(simplify (derivative '(cos x)))
(simplify (derivative '(sin x)))
(simplify (derivative '(expt e x)))
(simplify (derivative '(* 2 (expt e x))))
(simplify (derivative '(* 2 (expt e (* 2 x)))))
|#
